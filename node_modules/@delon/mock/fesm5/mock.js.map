{"version":3,"file":"mock.js.map","sources":["ng://@delon/mock/src/status.error.ts","ng://@delon/mock/src/mock.config.ts","ng://@delon/mock/src/mock.service.ts","ng://@delon/mock/src/mock.interceptor.ts","ng://@delon/mock/src/mock.module.ts"],"sourcesContent":["export class MockStatusError {\n  statusText: string;\n  // tslint:disable-next-line:no-any\n  constructor(public status: number, public error?: any) { }\n}\n","export class DelonMockConfig {\n  /** è§åå®ä¹æ°æ® */\n  // tslint:disable-next-line:no-any\n  data: any;\n  /** è¯·æ±å»¶è¿ï¼åä½ï¼æ¯«ç§ï¼é»è®¤ï¼`300` */\n  delay ?= 300;\n  /** æ¯å¦å¼ºå¶ææè¯·æ±é½Mockï¼`true` è¡¨ç¤ºå½è¯·æ±çURLä¸å­å¨æ¶ç´æ¥è¿å 404 éè¯¯ï¼`false` è¡¨ç¤ºæªå½ä¸­æ¶åéçå®HTTPè¯·æ± */\n  force ?= false;\n  /** æ¯å¦æå° Mock è¯·æ±ä¿¡æ¯ï¼å¼¥è¡¥æµè§å¨æ Networkä¿¡æ¯ */\n  log ?= true;\n  /**\n   * æ¯å¦æ¦æªå½ä¸­åç»§ç»­è°ç¨åç»­æ¦æªå¨ç `intercept` æ¹æ³ï¼é»è®¤ï¼`true`\n   */\n  executeOtherInterceptors ?= true;\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { MockCachedRule, MockRule } from './interface';\nimport { DelonMockConfig } from './mock.config';\n\n@Injectable()\nexport class MockService implements OnDestroy {\n  private cached: MockCachedRule[] = [];\n\n  constructor(private config: DelonMockConfig) {\n    this.applyMock();\n    delete this.config.data;\n  }\n\n  // #region parse rule\n\n  private applyMock() {\n    this.cached = [];\n    try {\n      this.realApplyMock();\n    } catch (e) {\n      this.outputError(e);\n    }\n  }\n\n  private realApplyMock() {\n    const data = this.config.data;\n    if (!data) return;\n    Object.keys(data).forEach((key: string) => {\n      const rules = data[key];\n      if (!rules) return;\n      Object.keys(rules).forEach((ruleKey: string) => {\n        const value = rules[ruleKey];\n        if (\n          !(\n            typeof value === 'function' ||\n            typeof value === 'object' ||\n            typeof value === 'string'\n          )\n        ) {\n          throw Error(\n            `mock value of [${key}-${ruleKey}] should be function or object or string, but got ${typeof value}`,\n          );\n        }\n        const rule = this.genRule(ruleKey, value);\n        if (\n          ['GET', 'POST', 'PUT', 'HEAD', 'DELETE', 'PATCH', 'OPTIONS'].indexOf(\n            rule.method,\n          ) === -1\n        ) {\n          throw Error(`method of ${key}-${ruleKey} is not valid`);\n        }\n        const item = this.cached.find(\n          w => w.url === rule.url && w.method === rule.method,\n        );\n        if (item) {\n          item.callback = rule.callback;\n        } else {\n          this.cached.push(rule);\n        }\n      });\n    });\n    // regular ordering\n    this.cached.sort(\n      (a, b) =>\n        (b.martcher || '').toString().length -\n        (a.martcher || '').toString().length,\n    );\n  }\n\n  // tslint:disable-next-line:no-any\n  private genRule(key: string, callback: any): MockCachedRule {\n    let method = 'GET';\n    let url = key;\n\n    if (key.indexOf(' ') > -1) {\n      const splited = key.split(' ');\n      method = splited[0].toLowerCase();\n      url = splited[1];\n    }\n\n    let martcher: RegExp = null;\n    let segments: string[] = [];\n    if (~url.indexOf(':')) {\n      segments = url!\n        .split('/')\n        .filter(segment => segment.startsWith(':'))\n        .map(v => v.substring(1));\n      const reStr = url!\n        .split('/')\n        .map(segment => (segment.startsWith(':') ? `([^/]+)` : segment))\n        .join('/');\n      martcher = new RegExp(`^${reStr}`, 'i');\n    } else if (/(\\([^)]+\\))/i.test(url)) {\n      martcher = new RegExp(url, 'i');\n    }\n\n    return {\n      url,\n      martcher,\n      segments,\n      callback,\n      method: method.toUpperCase(),\n    };\n  }\n\n  // tslint:disable-next-line:no-any\n  private outputError(error: any) {\n    const filePath = error.message.split(': ')[0];\n    const errors = error.stack\n      .split('\\n')\n      .filter(line => line.trim().indexOf('at ') !== 0)\n      .map(line => line.replace(`${filePath}: `, ''));\n    errors.splice(1, 0, ['']);\n\n    console.group();\n    console.warn(`==========Failed to parse mock config.==========`);\n    console.log(errors.join('\\n'));\n    console.groupEnd();\n\n    throw error;\n  }\n\n  // #endregion\n\n  getRule(method: string, url: string): MockRule {\n    method = (method || 'GET').toUpperCase();\n    const params = {};\n    const list =\n      this.cached.filter(\n        w =>\n          w.method === method &&\n          (w.martcher ? w.martcher.test(url) : w.url === url),\n      );\n    if (list.length === 0) return null;\n    const ret = list.find(w => w.url === url) || list[0];\n    if (ret.martcher) {\n      const execArr = ret.martcher.exec(url);\n      execArr.slice(1).map((value: string, index: number) => {\n        params[ret.segments[index]] = value;\n      });\n    }\n    return {\n      url,\n      method: ret.method,\n      params,\n      callback: ret.callback,\n    };\n  }\n\n  clearCache() {\n    this.cached = [];\n  }\n\n  get rules() {\n    return this.cached;\n  }\n\n  ngOnDestroy(): void {\n    this.clearCache();\n  }\n}\n","// tslint:disable:no-any\nimport { HttpBackend, HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse, HttpResponseBase, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Injectable, Injector } from '@angular/core';\nimport { of, throwError, Observable } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport { MockRequest } from './interface';\nimport { DelonMockConfig } from './mock.config';\nimport { MockService } from './mock.service';\nimport { MockStatusError } from './status.error';\n\nclass HttpMockInterceptorHandler implements HttpHandler {\n  constructor(private next: HttpHandler, private interceptor: HttpInterceptor) { }\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return this.interceptor.intercept(req, this.next);\n  }\n}\n\n@Injectable()\nexport class MockInterceptor implements HttpInterceptor {\n  constructor(private injector: Injector) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const src = this.injector.get(MockService);\n    const config = {\n      delay: 300,\n      force: false,\n      log: true,\n      executeOtherInterceptors: true,\n      ...this.injector.get(DelonMockConfig, null),\n    };\n    const rule = src.getRule(req.method, req.url.split('?')[0]);\n    if (!rule && !config.force) {\n      return next.handle(req);\n    }\n\n    let res: any;\n    switch (typeof rule.callback) {\n      case 'function':\n        const mockRequest: MockRequest = {\n          original: req,\n          body: req.body,\n          queryString: {},\n          headers: {},\n          params: rule.params,\n        };\n        const urlParams = req.url.split('?');\n        if (urlParams.length > 1) {\n          urlParams[1].split('&').forEach(item => {\n            const itemArr = item.split('=');\n            const key = itemArr[0];\n            const value = itemArr[1];\n            // is array\n            if (Object.keys(mockRequest.queryString).includes(key)) {\n              if (!Array.isArray(mockRequest.queryString[key])) {\n                mockRequest.queryString[key] = [mockRequest.queryString[key]];\n              }\n              mockRequest.queryString[key].push(value);\n            } else {\n              mockRequest.queryString[key] = value;\n            }\n          });\n        }\n        req.params\n          .keys()\n          .forEach(key => (mockRequest.queryString[key] = req.params.get(key)));\n        req.headers\n          .keys()\n          .forEach(key => (mockRequest.headers[key] = req.headers.get(key)));\n\n        try {\n          res = rule.callback.call(this, mockRequest);\n        } catch (e) {\n          res = new HttpErrorResponse({\n            url: req.url,\n            headers: req.headers,\n            status: 400,\n            statusText: e.statusText || 'Unknown Error',\n            error: e.error,\n          });\n          if (e instanceof MockStatusError) {\n            res.status = e.status;\n          }\n        }\n        break;\n      default:\n        res = rule.callback;\n        break;\n    }\n\n    if (!(res instanceof HttpResponseBase)) {\n      res = new HttpResponse({\n        status: 200,\n        url: req.url,\n        body: res,\n      });\n    }\n\n    if (config.log) {\n      console.log(`%cð½${req.method}->${req.url}->request`, 'background:#000;color:#bada55', req);\n      console.log(`%cð½${req.method}->${req.url}->response`, 'background:#000;color:#bada55', res);\n    }\n\n    const res$ = res instanceof HttpErrorResponse ? throwError(res) : of(res);\n\n    if (config.executeOtherInterceptors) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      const lastInterceptors = interceptors.slice(interceptors.indexOf(this) + 1);\n      if (lastInterceptors.length > 0) {\n        const chain = lastInterceptors.reduceRight(\n          (_next, _interceptor) => new HttpMockInterceptorHandler(_next, _interceptor), {\n            handle: () => res$,\n          } as HttpBackend,\n        );\n        return chain.handle(req).pipe(delay(config.delay));\n      }\n    }\n\n    return res$.pipe(delay(config.delay));\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { DelonMockConfig } from './mock.config';\nimport { MockInterceptor } from './mock.interceptor';\nimport { MockService } from './mock.service';\n\n@NgModule({})\nexport class DelonMockModule {\n  static forRoot(config: DelonMockConfig): ModuleWithProviders {\n    return {\n      ngModule: DelonMockModule,\n      providers: [\n        MockService,\n        { provide: DelonMockConfig, useValue: config },\n        { provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true },\n      ],\n    };\n  }\n\n  static forChild(): ModuleWithProviders {\n    return {\n      ngModule: DelonMockModule,\n      providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: MockInterceptor, multi: true },\n      ],\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
