{"version":3,"file":"xlsx.js.map","sources":["ng://@delon/abc/xlsx/xlsx.config.ts","ng://@delon/abc/xlsx/xlsx.service.ts","ng://@delon/abc/xlsx/xlsx.directive.ts","ng://@delon/abc/xlsx/xlsx.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class XlsxConfig {\n  /**\n   * Xlsx library path\n   */\n  url ?= '//cdn.bootcss.com/xlsx/0.12.13/xlsx.full.min.js';\n  /**\n   * Defines which Xlsx optional modules should get loaded, e.g:\n   *\n   * `[ '//cdn.bootcss.com/xlsx/0.12.13/cpexcel.js' ]`\n   */\n  modules?: string[] = [];\n}\n","// tslint:disable:no-any\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { LazyResult, LazyService } from '@delon/util';\nimport { saveAs } from 'file-saver';\n\nimport { XlsxConfig } from './xlsx.config';\nimport { XlsxExportOptions, XlsxExportSheet } from './xlsx.types';\n\ndeclare var XLSX: any;\n\n@Injectable({ providedIn: 'root' })\nexport class XlsxService {\n  constructor(\n    private cog: XlsxConfig,\n    private http: HttpClient,\n    private lazy: LazyService,\n  ) { }\n\n  private init(): Promise<LazyResult[]> {\n    return this.lazy.load([this.cog.url].concat(this.cog.modules));\n  }\n\n  private read(wb: any): { [key: string]: any[][] } {\n    const ret: any = {};\n    wb.SheetNames.forEach(name => {\n      const sheet: any = wb.Sheets[name];\n      ret[name] = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n    });\n    return ret;\n  }\n\n  /**\n   * å¯¼å¥Excelå¹¶è¾åºJSONï¼æ¯æ `<input type=\"file\">`ãURL å½¢å¼\n   * @param rABS å è½½æ°æ®æ¹å¼ `readAsBinaryString` ï¼é»è®¤ï¼ æ `readAsArrayBuffer`ï¼[æ´å¤ç»è](http://t.cn/R3n63A0)\n   */\n  import(\n    fileOrUrl: File | string,\n    rABS: 'readAsBinaryString' | 'readAsArrayBuffer' = 'readAsBinaryString',\n  ): Promise<{ [key: string]: any[][] }> {\n    return new Promise<{ [key: string]: any[][] }>((resolver, reject) => {\n      this.init().then(() => {\n        // from url\n        if (typeof fileOrUrl === 'string') {\n          this.http\n            .request('GET', fileOrUrl, { responseType: 'arraybuffer' })\n            .subscribe(\n              (res: ArrayBuffer) => {\n                const wb = XLSX.read(new Uint8Array(res), { type: 'array' });\n                resolver(this.read(wb));\n              },\n              (err: any) => {\n                reject(err);\n              },\n            );\n          return;\n        }\n        // from file\n        const reader: FileReader = new FileReader();\n        reader.onload = (e: any) => {\n          const wb: any = XLSX.read(e.target.result, { type: 'binary' });\n          resolver(this.read(wb));\n        };\n        reader[rABS](fileOrUrl);\n      });\n    });\n  }\n\n  /** å¯¼åº */\n  export(options: XlsxExportOptions): Promise<void> {\n    return this.init().then(() => {\n      const wb: any = XLSX.utils.book_new();\n      if (Array.isArray(options.sheets)) {\n        (options.sheets as XlsxExportSheet[]).forEach(\n          (value: XlsxExportSheet, index: number) => {\n            const ws: any = XLSX.utils.aoa_to_sheet(value.data);\n            XLSX.utils.book_append_sheet(\n              wb,\n              ws,\n              value.name || `Sheet${index + 1}`,\n            );\n          },\n        );\n      } else {\n        wb.SheetNames = Object.keys(options.sheets);\n        wb.Sheets = options.sheets;\n      }\n\n      if (options.callback) options.callback(wb);\n\n      const wbout: ArrayBuffer = XLSX.write(\n        wb,\n        {\n          bookType: 'xlsx',\n          bookSST: false,\n          type: 'array',\n          ...options.opts,\n        },\n      );\n      saveAs(\n        new Blob([wbout], { type: 'application/octet-stream' }),\n        options.filename || 'export.xlsx',\n      );\n    });\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport { XlsxService } from './xlsx.service';\nimport { XlsxExportOptions } from './xlsx.types';\n\n@Directive({\n  selector: '[xlsx]',\n  exportAs: 'xlsxDirective',\n})\nexport class XlsxDirective {\n  @Input('xlsx') data: XlsxExportOptions;\n\n  constructor(private srv: XlsxService) {}\n\n  @HostListener('click')\n  _click() {\n    this.srv.export(this.data);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DelonUtilModule } from '@delon/util';\n\nimport { XlsxDirective } from './xlsx.directive';\n\nconst COMPONENTS = [XlsxDirective];\n\n@NgModule({\n  imports: [CommonModule, DelonUtilModule],\n  declarations: [...COMPONENTS],\n  exports: [...COMPONENTS],\n})\nexport class XlsxModule { }\n"],"names":[],"mappings":"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"}
