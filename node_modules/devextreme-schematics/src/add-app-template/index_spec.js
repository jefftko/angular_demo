"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular-devkit/schematics/testing");
const path = require("path");
const collectionPath = path.join(__dirname, '../collection.json');
const appOptions = {
    name: 'testApp',
    projectRoot: '',
    inlineStyle: false,
    inlineTemplate: false,
    routing: true,
    style: 'css',
    skipTests: false,
    skipPackageJson: false
};
const workspaceOptions = {
    name: 'workspace',
    version: '6.0.0'
};
const angularSchematicsCollection = require.resolve('../../node_modules/@schematics/angular/collection.json');
const schematicRunner = new testing_1.SchematicTestRunner('@schematics/angular', angularSchematicsCollection);
let appTree;
beforeEach(() => {
    appTree = schematicRunner.runSchematic('workspace', workspaceOptions);
    appTree = schematicRunner.runSchematic('application', appOptions, appTree);
});
describe('add-app-template', () => {
    it('should add DevExtreme', () => {
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        const tree = runner.runSchematic('add-app-template', {}, appTree);
        const packageConfig = JSON.parse(tree.readContent('package.json'));
        expect('devextreme' in packageConfig.dependencies).toBe(true);
    });
    it('should consider the `project` option', () => {
        appTree = schematicRunner.runSchematic('application', {
            name: 'testApp2',
            inlineStyle: false,
            inlineTemplate: false,
            routing: true,
            style: 'scss',
            projectRoot: 'projects/testApp2'
        }, appTree);
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        const tree = runner.runSchematic('add-app-template', {
            project: 'testApp2'
        }, appTree);
        expect(tree.files)
            .toContain('/devextreme.json');
        expect(tree.files)
            .toContain('/projects/testApp2/src/themes/metadata.base.json');
        expect(tree.files)
            .toContain('/projects/testApp2/src/app/pages/home/home.component.ts');
    });
    it('should consider the `updateBudgets` option', () => {
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        const tree = runner.runSchematic('add-app-template', { updateBudgets: true }, appTree);
        const angularContent = JSON.parse(tree.readContent('/angular.json'));
        const budgets = angularContent.projects.testApp.architect.build.configurations.production.budgets;
        expect(budgets[0].maximumWarning).toEqual('4mb');
    });
});
//# sourceMappingURL=index_spec.js.map